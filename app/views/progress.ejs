<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Progress Updates</title>
</head>
<body>
    <div id="progress-container">
        <h1>Progress Updates</h1>
        <ul id="progress-list">
            <!-- Progress updates will be dynamically added here -->
        </ul>
    </div>

    <div id="file-info-container">
        <p>Link will appear here once complete</p>
    </div>

    <script>
        // Get the state from the query string
        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const state = urlParams.get('state');

        // Initialize interval variables
        let progressInterval;
        let fileLinkInterval;

        // Function to update progress
        function updateProgress(progress) {
            const progressList = document.getElementById("progress-list");
            progressList.innerHTML = ""; // Clear existing progress updates

            const listItem = document.createElement("li");
            listItem.textContent = `Progress: ${progress}%`;
            progressList.appendChild(listItem);
        }

        // Function to update file information
        function updateFileInfo(response) {
            const fileInfoContainer = document.getElementById("file-info-container");

            if (response.fileInfo.filename) {
                //console.log("from updateFileInfo IF response.fileInfo: ", response.fileInfo)
                const fileLink = document.createElement('a');
                //fileLink.href = response.fileInfo.fileUrl;
                fileLink.href = `/download-csv?${response.fileInfo.filename}`;
                fileLink.textContent = response.fileInfo.filename;
                fileLink.setAttribute('download', ''); // Set the "download" attribute to trigger download
                fileLink.setAttribute("target", "_blank"); // Open the link in a new tab

                fileInfoContainer.innerHTML = ""; // Clear existing file information
                fileInfoContainer.appendChild(fileLink);
                fileInfoContainer.appendChild("Please close browser before running again.");

            } else {
                fileInfoContainer.innerHTML = "<p>No File Information Available</p>";
            }
        }

        // Function to fetch progress updates from the server
        function fetchProgressUpdates(state) {
            progressInterval = setInterval(() => {
                fetch(`/progress-updates?state=${state}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.progress !== undefined) {
                            updateProgress(data.progress);
                            if (data.progress == 100){
                                //clear to stop fetch after completion
                                clearInterval(progressInterval);  
                            }
                        }
                    })
                    .catch(error => console.error("Error fetching progress updates:", error))
                    .finally(() => {
                        // Once progress updates are complete, fetch the file link
                        fetchFileLink();
                        // if (data.progress == 100){
                        //         //clear to stop fetch after completion
                        //         //clearInterval(progressInterval);  
                        //     }
                    });
            }, 2000); // Fetch updates every 2 seconds
        }

        function fetchFileLink() {
            fetch(`/file-link`)
                .then(response => response.json())
                .then(response => {
                    // Once progress updates are complete, fetch the file link
                    if (response.fileInfo.filename !== ''){
                        updateFileInfo(response);
                    }
                })
                .catch(error => console.error("Error fetching file link:", error));
        }

        // Fetch progress updates initially and periodically
        fetchProgressUpdates(state);
    </script>
</body>
</html>